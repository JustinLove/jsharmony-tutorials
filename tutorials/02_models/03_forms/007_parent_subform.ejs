<!-- 
/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<script type="text/x-tutorial-info">
{
  "Title": "Parent / Subform",
  "Menu": ["Models","Forms"],
  "Code": ["/models/C.json","/models/C.js"]
}
</script>

<h3>Overview</h3>
There are several types of subforms that can be embedded within a model:
<ul>
  <li>
    <b>Subform Controls</b><br/>
    Subforms that can be embedded at any location within a model
  </li>
  <li>
    <b>Tabbed Subforms</b><br/>
    Subforms organized into tabs, displayed one at a time.  More information is available in the <a href="/tutorials/forms_tabbed">Tabbed Forms</a> tutorial.
  </li>
  <li>
    <b>Duplicate Record Subforms</b><br/>
    A subform used to duplicate the current record.  More information is available in the <a href="/tutorials/duplicating_record">Duplicating a Record</a> tutorial.
  </li>
  <li>
    <b>Popup List of Values Subforms</b><br/>
    A popup grid used to select a value.  More information is available in the <a href="/tutorials/list_of_values_popup_lov">Popup LOV</a> tutorial.
  </li>
</ul>
This tutorial focuses on subform controls.<br/>
<br/>
Subform controls can be embedded within the following model layouts:
<ul>
  <li>Form</li>
  <li>Exec</li>
  <li>Report</li>
</ul>

<h3>Subform Examples</h3>
Subform controls can link to models with form, form-m, grid, multisel, and exec layouts.

<h3 data-level="2">Subform Layout: Form</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_Form_C?c_id=1&action=edit&popup=1','Subform Form')%>
<pre>
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "C_DOC","actions": "BU"}
  ]
}

"C_DOC": {
  "table":"c",
  "layout":"form",
  "caption":["Document","Documents"],
  "fields":[
    {"name":"c_doc","type":"file","caption":"Document","controlparams": {"data_folder": "c_doc"} }
  ]
}
</pre>
Subforms that link to another Form layout are used to model 1-to-1 relationships.  This is generally a rare occurrence, and should usually be handled by adding the fields directly to the parent form and linking to the database with an updateable view.<br/>
<br/>
If using subforms with a Form layout, it is necessary to set the "action" on the subform control.  If the parent and subform both link to the same table, the subform should not be available on Insert, since otherwise two insert statements on the same table will be executed.

<h3 data-level="2">Subform Layout: Form-m</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_FormM_C?c_id=1&action=edit&popup=1','Subform Form-m')%>
<pre>
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "C_CA"}
  ]
},
"C_CA": {
  "table":"ca",
  "layout":"form-m",
  "onecolumn":true,
  "caption":["Address","Addresses"],
  "fields":[
    {"name":"ca_country","caption":"Country"},
    {"name":"ca_addr1","caption":"Address"},
    {"name":"ca_addr2","caption":""},
    {"name":"ca_city","caption":"City"},
    {"name":"ca_state","caption":"State"},
    {"name":"ca_zip","caption":"Zip"}
  ]
}
</pre>

<h3 data-level="2">Subform Layout: Grid</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_Grid_C?c_id=1&action=edit&popup=1','Subform Grid')%>
<pre>
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "C_CC"}
  ]
},
"C_CC": {
  "table":"cc",
  "layout":"grid",
  "caption":["Contact","Contacts"],
  "fields":[
    {"name":"cc_name","caption":"Name"},
    {"name":"cc_title","caption":"Title"},
    {"name":"cc_email","caption":"Email"}
  ]
}
</pre>

<h3 data-level="2">Subform Layout: Multisel</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_Multisel_C?c_id=1&action=edit&popup=1','Subform Multisel')%>
<pre>
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "C_CF"}
  ]
},
"C_CF": {
  "table":"cf",
  "layout":"multisel",
  "caption":["Customer Flag","Customers Flags"],
  "fields":[
    {"name":"c_id"},
    {"name":"cf_type","caption":"Flag"}
  ]
}
</pre>

<h3 data-level="2">Subform Layout: Exec</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_Exec_C?c_id=1&action=edit&popup=1','Subform Exec')%>
<pre>
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "C_Activate"}
  ]
},
"C_Activate": {
  "layout": "exec", 
  "onecolumn":true,
  "title": "Activate Customer",
  "sqlexec": "update c set c_sts='ACTIVE' where c_id=@c_id", 
  "fields": [
    {"name":"c_id","control":"hidden"},
    {"control":"button","value":"Activate","onclick":"xmodel.controller.RunDBFunc(function(){jsh.XPage.Refresh();});"}
  ]
}
</pre>

<h3 data-level="2">Nested Subforms</h3>
<%-getScreenshot('jsHarmonyTutorials/FormSubform_Nested_E?e_id=1&action=edit&popup=1','Subform Nested')%>
<pre>
"E": {
  "table":"e",
  "layout":"form",
  "onecolumn":true,
  "caption":["Equipment","Equipment"],
  "fields":[
    {"name":"e_k","caption":"ID"},
    {"name":"e_name","caption":"Name"},
    {"name":"c_id","caption":"Customer","lov": { "sql": "select c_id codeval,c_name codetxt from c order by c_name", "blank": true } },
    {"control": "subform","target": "C","actions":"BU"}
  ]
},
"C": {
  "table":"c",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer","Customers"],
  "fields":[
    {"name":"c_name","caption":"Name"},
    {"name":"c_sts","caption":"Status"},
    {"control": "subform","target": "CC"}
  ]
},
"CC": {
  "table":"cc",
  "layout":"grid",
  "caption":["Contact","Contacts"],
  "fields":[
    {"name":"cc_name","caption":"Name"},
    {"name":"cc_title","caption":"Title"},
    {"name":"cc_email","caption":"Email"}
  ]
}
</pre>

<h3>Bindings</h3>
Bindings define how to filter / select subform data based on the parent form.  Often bindings can be automatically generated.<br/>
<br/>
More information on bindings can be found in the <a href="/tutorials/model_bindings">Model Bindings</a> tutorials.

<h3>Two Subforms of the same Model</h3>
If a model needs to be displayed twice on the same page, it is necessary to create a second instance of that model through inheritance:

<%-getScreenshot('jsHarmonyTutorials/FormSubform_TwoInstances_CC?action=edit&cc_id=1&popup=1','Two Subforms')%>
<pre>
"CC": {
  "table":"cc",
  "layout":"form",
  "onecolumn":true,
  "caption":["Customer Contact","Customer Contacts"],
  "actions":"BU",
  "fields":[
    {"name":"cc_name","caption":"Name"},
    {"name":"cc_title","caption":"Title"},
    {"name":"cc_email","caption":"Email"},
    {"control": "subform","target": "CC_CA_Billing","bindings":{ "ca_id":"ca_id_billing" },"actions":"BU"},
    {"control": "subform","target": "CC_CA_Shipping","bindings":{ "ca_id":"ca_id_shipping" },"actions": "BU"}
  ]
},
"CC_CA": {
  "table":"ca",
  "layout":"form",
  "onecolumn":true,
  "caption":["Address","Addresses"],
  "fields":[
    {"name":"ca_country","caption":"Country"},
    {"name":"ca_addr1","caption":"Address"},
    {"name":"ca_addr2","caption":""},
    {"name":"ca_city","caption":"City"},
    {"name":"ca_state","caption":"State"},
    {"name":"ca_zip","caption":"Zip"}
  ]
},
"CC_CA_Billing": {
  "inherits":"CC_CA",
  "title": "Billing Address"
},
"CC_CA_Shipping": {
  "inherits":"CC_CA",
  "title": "Shipping Address"
}
</pre>
In the example above, the two address records would need to be created dynamically via a database trigger when a contact is inserted.

<h3>Database Transactions</h3>
When using subforms or tabbed forms, all operations are saved in one atomic commit transaction.  Top-level insert statements are executed first, and then the generated key is passed through bindings to the subforms.

xxxxxxxxxxxxxxxx
Example of how the transaction tbl is passed / escaped
xxxxxxxxxxxxxxxx

<h3></h3>

<h3>Actions / Roles / Add vs Edit Mode</h3>
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
Actions / Roles at the control level
Browse forms with editable subforms
Description of how subforms are not displayed in add mode if they do not have the "I" action.
Subforms that would perform an update action must not be displayed
xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

<h3>Styling Subforms</h3>



** Inheritance -- XBaseModel