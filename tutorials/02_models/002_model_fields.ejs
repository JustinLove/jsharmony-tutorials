<!-- 
/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<script type="text/x-tutorial-info">
{
  "Title": "Fields",
  "Menu": ["Models","Models Overview"]
}
</script>

<h3>Introduction</h3>
Fields have two purposes:
<ol>
  <li>Define the columns that will be used in the model's database queries</li>
  <li>Define the fields, columns, and HTML elements will be displayed as part of the form or grid</li>
</ol>
Columns that are not defined in the fields section will not be retrieved from the database.<br/>
<br/>
Since there is significant overlap between the columns selected from the database and the columns displayed on the form / grid in most database systems, jsHarmony combines them into one set of entities called "fields":
<pre>
{
  "table":"c",
  "layout":"grid",
  "title":"All Customers",
  "caption":[0,"Customer","Customers"],
  "actions":"B", 
  "fields":[
    {"name":"c_id","type":"bigint","actions":"FB","key":1,"caption": "ID"},
    {"name":"c_sts","type":"varchar","length":"8","caption":"Status","actions":"B"},
    {"name":"c_name","type":"varchar","length":"50","caption":"Customer","caption_ext": "Customer Name","actions":"B","link":"edit:C"}
  ]
}
</pre>

<h3>Field Name</h3>
The field name has three purposes:
<ol>
  <li>The field name is used as the column name in database queries</li>
  <li>The field name is used as the control ID in rendering the front-end</li>
  <li>The field name is used as the ID to override field behavior in inherited forms</li>
</ol>
It is recommended to include a name for each field, even if the field is "render-only", such as in the case of front-end HTML code.<br/>
<br/>
Field names should be lower-case for cross-database compatibility.

<h3>Field Type Definition</h3>
Each of a model's database fields require a type definition.  The following types are available:
<ul>
  <li>"type: "varchar", "length": "30"</li>
  <li>"type: "char", "length": "30"</li>
  <li>"type: "bigint"</li>
  <li>"type: "int"</li>
  <li>"type: "smallint"</li>
  <li>"type: "tinyint"</li>
  <li>"type: "boolean"</li>
  <li>"type: "decimal", "precision": [10,4]</li>
  <li>"type: "float", "precision": 53</li>
  <li>"type: "date"</li>
  <li>"type: "time"</li>
  <li>"type: "datetime", "precision": 7</li>
  <li>"type: "varbinary", "length": "30"</li>
</ul>
Varchar / Char/ Varbinary length can be -1 for unlimited length.  If the length is omitted, -1 is set by default.<br/>
<br/>
Other custom types are available on a per-database basis.  Full support for all PostgreSQL and SQL Server types is available.

<h3>Field Actions</h3>
The field's "actions" property can consist of any of the following characters:
<ul>
  <li><b>B</b> - Browse (Field is retrieved as part of the database Select statement)</li>
  <li><b>I</b> - Insert (Field value is set as part of the database Insert statement)</li>
  <li><b>U</b> - Update (Field value is updated in the database Update statement)</li>
  <li><b>F</b> - Filter Field (If the field is set in the query string, it is used as part of the database "where" condition)</li>
</ul>
If the "B" action is not defined, the field is not selected from the database and is not rendered to the screen.  However, the first can still be used as part of the "where" condition as a Filter Field or Key Field.<br/>
<br/>
One way to hide fields in inherited models is to set the field's "actions" to "" (empty string).

<h3>Key Fields &amp; Filter Fields</h3>
In order to run an individual Select, Update, Insert, or Delete, a Key field is required.  This should ideally be a bigint or int field.  If a table uses two primary keys, it is still recommended to add an identity column that contains a unique sequence number, and use the sequence number as the key in jsHarmony.  Key fields are defined by setting the "key" parameter to 1:
<pre>{"name":"c_id", "type":"bigint", "actions":"B", "key":1, "caption": "ID"}</pre>
Filter fields are fields that can be included in the query string to further filter values.  This can be useful to display filtered grid views, or to add a subform.  Filter fields can be defined by adding the "F" character to the "actions" property:
<pre>{"name":"c_sts", "type":"varchar", "length":"8", "actions":"BF", "caption":"Status"}</pre>

<h3>Field Validation</h3>
Validation is performed both Client-side before submitting the form, and Server-side before processing the form.  Validation rules are automatically added for each field based on the datatype, however additional validation rules can be added to define required fields or specify ranges.  Validation is covered in more detail in the validation section.

<h3>Field Rendering</h3>
Field rendering is covered under the Grid and Form tutorials.  Depending on the model layout, a variety of controls and parameters are available to customize the display of the fields.
