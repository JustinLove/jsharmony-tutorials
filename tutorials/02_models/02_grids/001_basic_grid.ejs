<!-- 
/*
Copyright 2017 apHarmony

This file is part of jsHarmony.

jsHarmony is free software: you can redistribute it and/or modify
it under the terms of the GNU Lesser General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

jsHarmony is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public License
along with this package.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<script type="text/x-tutorial-info">
{
  "Title": "Basic Grid",
  "Menu": ["Models","Grids"],
  "Code": ["/models/CL.json"],
  "Demo": "/CL"
}
</script>
<h3>Introduction</h3>
The "grid" layout is used to view or edit multiple records.  Grids can be either read-only or editable.

<%-getScreenshot('/GridBasic_CL?popup=1','Basic Grid')%>

A grid's datasource is a database table or view.  The database table or view is defined by the "table" property.<br/>
<br/>
In this example, the Customer "c" table contains the data for the grid:
<pre>
{
  "layout":"grid",  //Required - define the model as a grid
  "table":"c",      //Database table or view used as a data source
  "actions":"B"     //Read-only grid (as opposed to an editable grid)
}
</pre>

<h3>Grid Fields</h3>
The "fields" property defines the fields that are pulled from the database.  The database SQL statements will be automatically generated based on the fields.  Hidden columns, such as those used only for filtering or linking to other forms, must also be defined in the fields section.

<pre>
{
  "fields":[
    {"name":"c_id","type":"bigint","actions":"B","key":1,"caption": "ID"},
    {"name":"c_name","type":"varchar","length":"50","caption":"Customer","caption_ext": "Customer Name","actions":"B","link":"edit:C"}
  ]
}
</pre>

Each field should have a "name", datatype information, and a caption.

<pre>
*******
1. check if "action":"" is pulled from the database
2. check when action:B is applied

xxxxxxxxxxxxxxxxxxxxxxx
nokey

name, type, length, precision, key, 
*** unbound fields
*** EJS
hidden, access (B, S
format
value
link
html
disable_sort
disable_search
disable_search_all
"sql_sort"
sql_search
sql_search_sound
captionstyle, captionclass
cellstyle, cellclass
</pre>

<h3>Sort</h3>
Clicking on the column header will sort the grid by that column.  Back-button history will also be added for the sort action.

<pre>
xxxxxxxxxxxxxxxxxxxxxxxx 
Custom sort expressions
sql_sort
disable_sort
</pre>

<h3>Searching / Filtering</h3>
"grid_require_filter": 1
"grid_expand_filter": 1
"noresultsmessage":  "No results found %%%FORSEARCHPHRASE%%%",

sql_search
sql_search_sound
disable_search
disable_search_all

<h3>"Add" Button</h3>
"buttons":[{"link":"add:C"}],
{ "link": "add:H", "icon": "add", "text": "Add %%%CAPTION%%%", "actions": "I", "bindings": { "N_SCOPE_ID": "N_SCOPE_ID", "N_SCOPE": "'C'", "C_ID":  "N_SCOPE_ID", "N_TYPE":  "'C'" }, "style": "", "class": "", "roles": { "CLIENT": "*", "C_ADMIN": "B" }, "nl": 1 }, //or just put the link for add
  "nogridadd": 1,

<h3>Paging</h3>
Paging is automatically performed when the user scrolls to the bottom of the screen.  The number of rows per page can be configured via:
<pre>"rowlimit": 50</pre>
The Config variable "default_rowlimit" defined in app.config.js sets the default value of the rowlimit parameter:
<pre>jsh.Config.default_rowlimit = 50;</pre>
In certain use cases, automatic paging can be disabled via:
<pre>"disableautoload": 1</pre>
